@use "sass:list";
@use "sass:map";
@use "sass:string";

/// Generates a name of a locally-installed font based on the passed arguments. This is to use in the local() function of the @font-face rule.
///
/// @param {string} $font-family - a font family of the font (eg: "Roboto")
/// @param {string | null} $weight-name - a name of a font weight to use in the font name (eg: "Bold"), or null if there is no such name
/// @param {number} $font-weight - a value of the font-weight property (numeric only)
/// @param {string} $font-style - a value of the font-style property
/// @param {bool} $is-spaceless - true if the font name should be stripped of whitespaces (eg: "Roboto-Bold"); otherwise, false to preserve whitespaces (eg: "Roboto Bold")
/// @return {string} - a name of the locally-installed font
@function -get-local-font-name($font-family, $weight-name, $font-weight, $font-style, $is-spaceless) {
  $font-name: if($is-spaceless, to-spaceless($font-family), $font-family);
  $delimiter: if($is-spaceless, "-", " ");

  @if $font-style == normal {
    @if $weight-name {
      $font-name: $font-name + $delimiter + $weight-name;
    }
  } @else if $font-weight == 400 {
    $font-name: $font-name + $delimiter + capitalize($font-style);
  } @else {
    $font-name: $font-name + $delimiter + $weight-name + if($is-spaceless, "", " ") + capitalize($font-style);
  }

  @return $font-name;
}

/// Generates a comma-separated list of the resources containing font data. This is to use in the src property of the @font-face rule.
///
/// @param {string} $font-family - a font family of the font (eg: "Roboto")
/// @param {string | null} $weight-name - a name of a font weight to use in the font name (eg: "Bold"), or null if there is no such name
/// @param {number} $font-weight - a value of the font-weight property (numeric only)
/// @param {string} $font-style - a value of the font-style property
/// @param {list} $extensions - a list of available font file extensions; allowed extensions are eot, woff2, woff, otf, ttf, svg (the order of the values is mandatory)
/// @return {list} - a comma-separated list of external references or locally-installed font face names
@function -get-font-src($font-family, $weight-name, $font-weight, $font-style, $extensions) {
  $font-name: -get-local-font-name($font-family, $weight-name, $font-weight, $font-style, false);
  $font-name-spaceless: -get-local-font-name($font-family, $weight-name, $font-weight, $font-style, true);
  $modifiers: (
    "eot": "?",
    "svg": "#" + replace($font-family, " ", "_")
  );
  $formats: (
    "otf": "opentype",
    "ttf": "truetype"
  );
  $src: local($font-name);

  @if $font-name != $font-name-spaceless {
    $src: list.append($src, local($font-name-spaceless), comma);
  }

  @each $extension in $extensions {
    $extension-modified: if(map.has-key($modifiers, $extension), $extension + map.get($modifiers, $extension), $extension);
    $format: if(map.has-key($formats, $extension), map.get($formats, $extension), $extension);
    $src: list.append($src, url("../fonts/#{string.to-lower-case($font-name-spaceless)}.#{$extension-modified}") format(string.quote($format)), comma);
  }

  @return $src;
}

/// Outputs a @font-face rule that specifies a custom font.
///
/// @param {string} $font-family - a font family of the font (eg: "Roboto")
/// @param {string | null} $weight-name [null] - a name of a font weight to use in the font name (eg: "Bold"), or null if there is no such name
/// @param {number} $font-weight [400] - a value of the font-weight property (numeric only)
/// @param {string} $font-style [normal] - a value of the font-style property
/// @param {list} $extensions [woff2 woff] - a list of available font file extensions; allowed extensions are eot, woff2, woff, otf, ttf, svg (the order of the values is mandatory)
/// @output a @font-face rule for the custom font
///
/// @example scss - setting of the Roboto Bold font
///   @include font-face("Roboto", "Bold", 700);
@mixin font-face($font-family, $weight-name: null, $font-weight: 400, $font-style: normal, $extensions: woff2 woff) {
  @font-face {
    font-style: $font-style;
    font-weight: $font-weight;
    font-family: $font-family;
    font-display: swap;
    src: -get-font-src($font-family, $weight-name, $font-weight, $font-style, $extensions);
  }
}
