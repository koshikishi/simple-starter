@use "sass:list";
@use "sass:meta";

/// Outputs a set of styles for setting a background image in modern format (WebP, AVIF) with a fallback for older browsers.
///
/// @param {string | list} $images - an image filename, an url() resource, a gradient or a list of them for multiple backgrounds
/// @param {string | list} $extensions [webp] - a modern image format extension or a list of extensions
/// @output a set of styles for setting a background image in modern format with a fallback
///
/// @example scss - setting a background in WebP (default) to .foo
///   .foo {
///     @include background-modern("image.jpg");
///   }
///
/// @example scss - setting two backgrounds in WebP and AVIF to .foo
///   .foo {
///     @include background-modern(url("../images/image1.jpg") url("../images/image2.jpg"), webp avif);
///   }
@mixin background-modern($images, $extensions: webp) {
  $background-normal: ();
  $selector: ".no-js &";
  $formats: jpg jpeg png;

  @each $image in $images {
    $background-normal: list.append($background-normal, to-url($image), comma);
  }

  @each $extension in $extensions {
    $selector: list.append($selector, ".no-#{$extension} &", comma);
  }

  #{$selector} {
    background-image: $background-normal;
  }

  @each $extension in $extensions {
    $background-modern: ();

    @each $image in $background-normal {
      @each $format in $formats {
        $image: replace($image, $format, $extension);
      }

      $background-modern: list.append($background-modern, $image, comma); // stylelint-disable-line
    }

    .#{$extension} & {
      background-image: $background-modern;
    }
  }
}

/// Creates a @media at-rule to apply styles for retina displays.
///
/// @param {number} $dppx [2] - a pixel density of the display (unitless value)
/// @output a @media at-rule for targeting retina displays
@mixin retina($dppx: 2) {
  @media #{media-query($min-resolution: $dppx * 96dpi)} {
    @content;
  }
}

/// Sets a retina background image on an element.
///
/// @param {list} $images - a space-separated list of image filenames in ascending order of size (each filename must be quoted) or a list of lists for multiple backgrounds
/// @param {string | number | list} $sizes - a size of the background image (any valid value of the background-size property) or a list of sizes for multiple backgrounds
/// @param {string | list | null} $extensions [null] - an image format extension or a list of extensions for setting a background in modern format (WebP, AVIF), or null if no such formats are used
/// @output a block of styles for retina background image
///
/// @example scss - setting a retina background to .foo
///   .foo {
///     @include background-retina("image.jpg" "image@2x.jpg", 100px 50px);
///   }
///
/// @example scss - setting two retina backgrounds to .foo
///   .foo {
///     @include background-retina(["image1.jpg" "image1@2x.jpg", "image2.jpg" "image2@2x.jpg"], [100px 50px, contain]);
///   }
///
/// @example scss - setting a retina background in WebP to .foo
///   .foo {
///     @include background-retina("image.jpg" "image@2x.jpg", 100px 50px, webp);
///   }
@mixin background-retina($images, $sizes, $extensions: null) {
  $is-multiple: meta.type-of(list.nth($images, 1)) == list;
  $max-retina: list.length(if($is-multiple, list.nth($images, 1), $images));
  $background-normal: ();

  @each $image in nth-of-lists($images, 1) {
    $background-normal: list.append($background-normal, to-url($image), comma);
  }

  @if $extensions {
    @include background-modern($background-normal, $extensions);
  } @else {
    background-image: $background-normal;
  }

  background-size: list.join($sizes, (), $bracketed: false); // to get rid of the square brackets

  @for $i from 2 through $max-retina {
    $background-retina: ();

    @each $image in nth-of-lists($images, $i) {
      $background-retina: list.append($background-retina, to-url($image), comma);
    }

    @include retina($i) {
      @if $extensions {
        @include background-modern($background-retina, $extensions);
      } @else {
        background-image: $background-retina;
      }
    }
  }
}
